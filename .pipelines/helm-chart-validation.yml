trigger: none

pr:
  branches:
    include:
      - '*'
  paths:
    include:
      - 'chart/**'
      - '.pipelines/helm-chart-validation.yml'

variables:
  - group: lightrun-helm-chart-variables
  - name: CHART_PATH
    value: './chart'
  - name: RELEASE_NAME
    value: 'test-release'
  - name: NAMESPACE
    value: 'test-namespace'
  - name: HELM_VERSION
    value: '3.13.2'  # Specify a fixed version for stability

steps:
- script: |
    # Cleanup any existing k3d cluster
    k3d cluster delete chart-testing || true
  displayName: 'Cleanup Previous Cluster'
  continueOnError: true

- script: |
    # Install jq for JSON parsing
    sudo apt-get update && sudo apt-get install -y jq
    
    # Fetch latest appVersion from ArtifactHub
    RESPONSE=$(curl -s https://artifacthub.io/api/v1/packages/helm/lightrun-helm-chart/lightrun-helm-chart)
    APP_VERSION=$(echo $RESPONSE | jq -r '.app_version')
    CHART_VERSION=$(echo $RESPONSE | jq -r '.version')
    
    echo "Latest chart version: $CHART_VERSION"
    echo "Latest app version: $APP_VERSION"

    # Create values.yaml file
    cat > values.yaml << EOF
    general:
      lightrun_endpoint: test.example.com
      name: test-client
      deployment_type: saas
      statefulset:
        enabled: false
    
    secrets:
      keycloak:
        password: test123
      db:
        user: test_user
        password: test123
      mq:
        user: test_user
        password: test123
      redis:
        password: test123
      license:
        content: test123
        signature: test123
      defaults:
        dockerhub_config:
          configContent: $(DOCKERHUB_CONFIG)
        mail_password: test123
        keystore_password: test123
    
    certificate:
      tls:
        crt: $(CERTIFICATE_CRT)
        key: $(CERTIFICATE_KEY)
    
    deployments:
      frontend:
        resources:
          cpu: "0m"
          memory: "0Mi"
        image:
          tag: ${APP_VERSION}
      backend:
        resources:
          cpu: "0m"
          memory: "0Mi"
        extraEnv:
          - name: "_JAVA_OPTIONS"
            value: "-XX:+UseContainerSupport"
        image:
          tag: ${APP_VERSION}
      keycloak:
        resources:
          cpu: "0m"
          memory: "0Mi"
        extraEnv:
          - name: "_JAVA_OPTIONS"
            value: "-XX:+UseContainerSupport"
        image:
          tag: ${APP_VERSION}
      redis:
        resources:
          cpu: "0m"
          memory: "0Mi"
      mysql:
        resources:
          cpu: "0m"
          memory: "0Mi"
      rabbitmq:
        resources:
          cpu: "0m"
          memory: "0Mi"
      data_streamer:
        resources:
          cpu: "0m"
          memory: "0Mi"
      router:
        resources:
          cpu: "0m"
          memory: "0Mi"
    EOF
  displayName: 'Create Values File'

- task: HelmInstaller@0
  displayName: 'Install Helm'
  inputs:
    helmVersion: $(HELM_VERSION)
    installKubectl: true

- script: |
    wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
    k3d cluster create chart-testing --wait --timeout 120s
  displayName: 'Create k3d Cluster'

- script: |
    helm lint $(CHART_PATH) -f values.yaml 2>&1 | grep -v "SECRET" || exit ${PIPESTATUS[0]}
  displayName: 'Lint Helm Chart'
  
- script: |
    # Redirect output to file
    helm template $(RELEASE_NAME) $(CHART_PATH) -f values.yaml --namespace $(NAMESPACE) > template_output.yaml 2>&1
    
    # Filter sensitive data and display
    cat template_output.yaml | grep -v "password:\|secret:\|token:\|key:" || true
    
    # Check if template command was successful
    if [ -s template_output.yaml ]; then
      echo "Template validation successful"
      rm template_output.yaml
      exit 0
    else
      echo "Template validation failed"
      rm template_output.yaml
      exit 1
    fi
  displayName: 'Validate Templates'

- script: |
    kubectl create namespace $(NAMESPACE)
  displayName: 'Create Namespace'

- script: |
    helm install $(RELEASE_NAME) $(CHART_PATH) \
      -f values.yaml \
      --namespace $(NAMESPACE) \
      --wait \
      --timeout 5m \
      --debug
  displayName: 'Install Chart'

- script: |
    kubectl get all -n $(NAMESPACE)
    
    # Check if all pods are running
    kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=$(RELEASE_NAME) -n $(NAMESPACE) --timeout=2m
    
    # Get deployment status
    kubectl get deployments -n $(NAMESPACE) -o wide
  displayName: 'Verify Deployment'

- script: |
    helm test $(RELEASE_NAME) -n $(NAMESPACE)
  displayName: 'Run Chart Tests'

- script: |
    kubectl get pods -n $(NAMESPACE)
    kubectl describe pods -n $(NAMESPACE)
    kubectl get events -n $(NAMESPACE)
    helm list -n $(NAMESPACE)
    helm status $(RELEASE_NAME) -n $(NAMESPACE)
  displayName: 'Collect Debug Info'
  condition: failed()

- script: |
    helm uninstall $(RELEASE_NAME) -n $(NAMESPACE)
  displayName: 'Cleanup'
  condition: always() 