name:  'Lightrun Helm Chart Validation'
trigger: none

pr:
  branches:
    include:
      - '*'
  paths:
    include:
      - 'chart/**'
      - '.pipelines/helm-chart-validation.yml'

variables:
  - group: lightrun-helm-chart-variables
  - name: CHART_PATH
    value: './chart'
  - name: RELEASE_NAME
    value: 'lightrun'
  - name: NAMESPACE
    value: 'lightrun'

steps:
- script: |
    set -euo pipefail
    # Cleanup any existing k3d cluster
    k3d cluster delete chart-testing || true
  displayName: 'Cleanup Previous Cluster'
  continueOnError: true

- script: |
    set -euo pipefail
    # Install required tools
    sudo apt-get update && sudo apt-get install -y gawk
    
    # Read the version from versions_mapping.md
    # Skip header and separator, get first data row with actual version numbers
    CHART_VERSION=$(awk -F'|' 'NR > 2 && $2 !~ /^[[:space:]]*-+[[:space:]]*$/ {gsub(/^[[:space:]]+|[[:space:]]+$/,"",$2); if ($2 != "") {print $2; exit}}' docs/installation/versions_mapping.md)
    APP_VERSION=$(awk -F'|' 'NR > 2 && $3 !~ /^[[:space:]]*-+[[:space:]]*$/ {gsub(/^[[:space:]]+|[[:space:]]+$/,"",$3); if ($3 != "") {print $3; exit}}' docs/installation/versions_mapping.md)
    
    # Verify that we got the versions
    if [ -z "$CHART_VERSION" ] || [ -z "$APP_VERSION" ]; then
      echo "Failed to extract versions from versions_mapping.md"
      cat docs/installation/versions_mapping.md
      exit 1
    fi
    
    echo "Chart version: $CHART_VERSION"
    echo "App version: $APP_VERSION"

    # Create values.yaml file
    cat > values.yaml << EOF
    general:
      lightrun_endpoint: test.example.com
      name: test-client
      deployment_type: on-prem
      statefulset:
        enabled: false
    
    secrets:
      license:
        content: $(LICENSE_CONTENT)
        signature: $(LICENSE_SIGNATURE)
      keycloak:
        password: test123
      db:
        user: test_user
        password: test123
      mq:
        user: test_user
        password: test123
      redis:
        password: test123
      customCa:
        customCaCertificate: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZxVENDQTVHZ0F3SUJBZ0lVZWx4QXR3aWk4THVCSmhMVTdmVzlqcHNaajVvd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1pERUxNQWtHQTFVRUJoTUNTVXd4Q3pBSkJnTlZCQWdNQWtsTU1Rd3dDZ1lEVlFRSERBTlVURll4RVRBUApCZ05WQkFvTUNHeHBaMmgwY25WdU1SRXdEd1lEVlFRTERBaHNhV2RvZEhKMWJqRVVNQklHQTFVRUF3d0xiWGx3CmNtbDJZWFJsWTJFd0hoY05NalV3T1RBek1Ea3hOVEE1V2hjTk1qZ3dOakl6TURreE5UQTVXakJrTVFzd0NRWUQKVlFRR0V3SkpUREVMTUFrR0ExVUVDQXdDU1V3eEREQUtCZ05WQkFjTUExUk1WakVSTUE4R0ExVUVDZ3dJYkdsbgphSFJ5ZFc0eEVUQVBCZ05WQkFzTUNHeHBaMmgwY25WdU1SUXdFZ1lEVlFRRERBdHRlWEJ5YVhaaGRHVmpZVENDCkFpSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnSVBBRENDQWdvQ2dnSUJBTFNrNDIwNWM2U2JVRm82MmE4M1VIbUwKbWZMeTNSZlhXcWg5VlNVak8yRXp1dmZkZkdEVDJtSDZwTkdwMGxzTUkrVEtGY3ZWQUY5aXJJWk5VLzFFeGw1cQozU20vbEV5Q0laTE4xSGhVU2JPL1Q0Vy9GVUZQWHl0VXJuNW0vRWxpTm14OHY3cW5IbEt5Y280aThVYStBejVTCm10eTN4bnJmMXB0Sm43T2piajNVL3RQZE9UaDVNT0VhczQxMTF1L2xhZWhxY0psVGVzQVpkZ3BkY3I5TFlNcnAKaXdOaHB2RDB6NnY0MDNnam9UUHJCYTQvVzNaOTJyaCtlVkhBTEREendXcmpHYU16aHIyaUtPcUR6V01mamtnMgpVUEtwakQ1YVpuS0N1Zjc5ZjZiRURUa3dTMS9LUWVQZzIrTzdnQ0ZmeGoyTTNDOEsvVngyY3ppTWFzRmtBeUVZClpYNFRpVDNhVU1kVkhzaVJpdTdkMm9VdUdESnp5bVRJcXY5am5GcE5GU2drU1FWaWxQQXNWVVNRMng3NDRORGcKa3JDOTVSaUV5MHJwK1h4Uk1QTmtLVXJ1QXNPa3lmYTdhU0JsU1ArVHJTZTZoZ0lVSUdTS0gzVGFwaTJCdUdpOQpZbW9SUCtsazNRRG5aYTltQUVkVnBKOHZnb3B4WS9MZmdpWUJOZm03M2tXWXNuMEs1MlczaWVqcmRYdE1qVVpYCjdMcEIvRHdpNEpiK3E3NFJWTzQra2pQVE9xcThyKzBPUXovSXB3MkxpcVJ1NFRJYzZOWXpJQjlJaFpyQXAxN0IKbUxiZFBqN09BaTFkVjY5ZnVGL3lzblZadHNFZnZXbjljK2lmRXBhYnBjNlhDUkZsRktLb0JHbmhhdDZLb2hobApUclRiNC9JbGhyNUlweGY4ZkxNcEFnTUJBQUdqVXpCUk1CMEdBMVVkRGdRV0JCUTlpUFlkaHFXSU5PK0NuQldqClBRR1BHOTFSTGpBZkJnTlZIU01FR0RBV2dCUTlpUFlkaHFXSU5PK0NuQldqUFFHUEc5MVJMakFQQmdOVkhSTUIKQWY4RUJUQURBUUgvTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElDQVFBeXgrOGJSNjhDQk1TTWpEWk5pUWdWWVdUMApacXA5ZmFVZWpuRm9PY0R5YTh6bjJxMHY0bVpZbFVyTHpOeTdGbFM3K04vQ0hJQUU1WHdCdVlGKzZJb0hYTC9ZCkwvY2lONmJBTVlmK1hYMEFyRUNmNUNvTGhOSHFKRHhqQ3M0dWY3dVJ3TkZHWTg4UzVjUnpIRHkvUkJjQ3JraVYKRDNJOUU5OHdhc055S1Z0cThmSHdDVG5vQW5abEtEUFhsakRlSzZud1JiTUtBZSt6b0VXVDRKWVEzVlVWRTk4aQpkK3BPQ0M1c0JSV2ZPM0RnMHhuK0tCdkx6eTZEZHd4VldJN3NTVEh5Z3RqYmVrT0d4U2pNTlpJZkRIN05tS2cvCk50STZtbGZyeXpiUHRMejc3Rk15NHNIRlNDWjN6eEJQL1NFcFVyRSs5SzVIUno1Wk9LbktDVGZDV0FpRmdEUGgKY2IreUI3ZFh1TlJJaUYxMFRoKzJEdnNNaDJENzIxSEdOWE5EcjljdmNwL29MMFJvaEIwSkRLOU1MdncvajNPRgo1MWlGMnN3ZUg5WHUxem1pNFREeFFWOEVuS2lCOVltUjhtcEVtZzJGa0hXUDlKRWpQWE04WUlPbURHWlhRNk4zCk1IWTZhLzBMa0dONlhSN2sxRFRoeDdXY3NIY3Y1amlVeklheW5LZXRxeVA2REN2YjNoNWViZnNpVGRaVkhzb3YKZVBSSVR2NDh4RUNMMVh1K21wZDJ5enU3N05qNXV5RUt3cHFWOFh6Q3ZIYkM0NytVTVVSbk56Wm9xblF3ZnVPeQptY0RvKzdxRU9VdDdiRGtEbW9uTXl1aVlFSnczcGdtYmlkSUNEMlJQcDBKeXVTc001a2p0Vktrb3l3UFlIcDBJCnNoY0lEVnczQnR2NUtFS2Z0QT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
      defaults:
        dockerhub_config:
          configContent: $(DOCKERHUB_CONFIG)
        mail_password: test123
        keystore_password: test123
    
    certificate:
      tls:
        crt: $(CERTIFICATE_CRT)
        key: $(CERTIFICATE_KEY)
    
    deployments:
      frontend:
        resources:
          cpu: "0m"
          memory: "0Mi"
        image:
          tag: ${APP_VERSION}
      backend:
        resources:
          cpu: "0m"
          memory: "0Mi"
        extraEnvs:
          - name: "_JAVA_OPTIONS"
            value: ""
        image:
          tag: ${APP_VERSION}
      keycloak:
        resources:
          cpu: "0m"
          memory: "0Mi"
        extraEnvs:
          - name: "_JAVA_OPTIONS"
            value: ""
        image:
          tag: ${APP_VERSION}
      redis:
        resources:
          cpu: "0m"
          memory: "0Mi"
      mysql:
        resources:
          cpu: "0m"
          memory: "0Mi"
      rabbitmq:
        resources:
          cpu: "0m"
          memory: "0Mi"
      data_streamer:
        resources:
          cpu: "0m"
          memory: "0Mi"
      router:
        resources:
          cpu: "0m"
          memory: "0Mi"
      artifacts:
        image:
          tag: ${APP_VERSION}
    EOF
  displayName: 'Create Values File'

- script: |
    set -euo pipefail
    # Verify Helm is available and show version
    helm version
    
    # Verify kubectl is available
    kubectl version --client
  displayName: 'Verify Tools'

- script: |
    set -euo pipefail
    wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
    k3d cluster create chart-testing --wait --timeout 120s
  displayName: 'Create k3d Cluster'

- script: |
    set -euo pipefail
    helm lint $(CHART_PATH) -f values.yaml 2>&1 | grep -v "SECRET" || exit ${PIPESTATUS[0]}
  displayName: 'Lint Helm Chart'
  
- script: |
    set -euo pipefail
    # Redirect output to file
    helm template $(RELEASE_NAME) $(CHART_PATH) -f values.yaml --namespace $(NAMESPACE) > template_output.yaml 2>&1
    
    # Filter sensitive data and display
    cat template_output.yaml | grep -v "password:\|secret:\|token:\|key:" || true
    
    # Check if template command was successful
    if [ -s template_output.yaml ]; then
      echo "Template validation successful"
      rm template_output.yaml
      exit 0
    else
      echo "Template validation failed"
      rm template_output.yaml
      exit 1
    fi
  displayName: 'Validate Templates'

- script: |
    set -euo pipefail

    echo "Verifying Keycloak custom CA volume mount in Helm template"

    # Redirect output to file
    helm template $(RELEASE_NAME) $(CHART_PATH) -f values.yaml --namespace $(NAMESPACE) > template_output.yaml 2>&1

    KEYCLOAK_CONTAINER="${RELEASE_NAME}-keycloak"

    # Extract volume mounts for container $(RELEASE_NAME)-keycloak from the rendered template file
    VOLUME_MOUNTS=$(yq e ".spec.template.spec.containers[] | select(.name==\"$KEYCLOAK_CONTAINER\") | .volumeMounts[].name" template_output.yaml)

    if echo "$VOLUME_MOUNTS" | grep -q "^custom-ca-certificate$"; then
      echo "Found 'custom-ca-certificate' volume mount in Helm template as expected"
    else
      echo "Missing 'custom-ca-certificate' volume mount in Helm template"
      exit 1
    fi
  displayName: 'Check Keycloak custom CA volume in Helm template'

- script: |
    set -euo pipefail
    kubectl create namespace $(NAMESPACE)
  displayName: 'Create Namespace'

- script: |
    set -euo pipefail
    helm install $(RELEASE_NAME) $(CHART_PATH) \
      -f values.yaml \
      --namespace $(NAMESPACE) \
      --wait \
      --timeout 10m \
      --debug
  displayName: 'Install Chart'

- script: |
    set -euo pipefail
    kubectl get all -n $(NAMESPACE)
    
    # Wait for all pods in the namespace to be ready
    kubectl wait --for=condition=ready pod --all -n $(NAMESPACE) --timeout=5m
    
    # Get deployment status
    kubectl get deployments -n $(NAMESPACE) -o wide
  displayName: 'Verify Deployment'

- script: |
    set -euo pipefail
    helm uninstall $(RELEASE_NAME) -n $(NAMESPACE)
  displayName: 'Cleanup'
  condition: always() 
