trigger: none

pr:
  branches:
    include:
      - '*'
  paths:
    include:
      - 'chart/**'
      - '.pipelines/helm-chart-validation.yml'

variables:
  - group: lightrun-helm-chart-variables
  - name: CHART_PATH
    value: './chart'
  - name: RELEASE_NAME
    value: 'test-release'
  - name: NAMESPACE
    value: 'test-namespace'
  - name: HELM_VERSION
    value: '3.13.2'  # Specify a fixed version for stability
  - name: HELM_PARAMS
    value: >-
      --set general.lightrun_endpoint=test.example.com 
      --set general.name=test-client      
      --set general.deployment_type=saas
      --set general.statefulset.enabled=false
      --set secrets.keycloak.password=test123 
      --set secrets.db.user=test_user 
      --set secrets.db.password=test123 
      --set secrets.mq.user=test_user 
      --set secrets.mq.password=test123 
      --set secrets.redis.password=test123 
      --set secrets.license.content=test123 
      --set secrets.license.signature=test123 
      --set secrets.defaults.dockerhub_config.configContent=$(DOCKERHUB_CONFIG)
      --set secrets.defaults.mail_password=test123 
      --set secrets.defaults.keystore_password=test123
      --set certificate.tls.crt=$(CERTIFICATE_CRT)
      --set certificate.tls.key=$(CERTIFICATE_KEY)      
      --set deployments.frontend.resources.cpu="0m" 
      --set deployments.frontend.resources.memory="0Mi" 
      --set deployments.backend.resources.cpu="0m" 
      --set deployments.backend.resources.memory="0Mi" 
      --set deployments.backend.extraEnv[0].name=_JAVA_OPTIONS,deployments.backend.extraEnv[0].value=""
      --set deployments.keycloak.resources.cpu="0m" 
      --set deployments.keycloak.resources.memory="0Mi"
      --set deployments.keycloak.extraEnv[0].name=_JAVA_OPTIONS,deployments.keycloak.extraEnv[0].value=""
      --set deployments.redis.resources.cpu="0m" 
      --set deployments.redis.resources.memory="0Mi" 
      --set deployments.mysql.resources.cpu="0m" 
      --set deployments.mysql.resources.memory="0Mi" 
      --set deployments.rabbitmq.resources.cpu="0m" 
      --set deployments.rabbitmq.resources.memory="0Mi" 
      --set deployments.data_streamer.resources.cpu="0m" 
      --set deployments.data_streamer.resources.memory="0Mi" 
      --set deployments.router.resources.cpu="0m" 
      --set deployments.router.resources.memory="0Mi"

pool:
  name: "Azure VMSS"

steps:
- script: |
    # Cleanup any existing k3d cluster
    k3d cluster delete chart-testing || true
  displayName: 'Cleanup Previous Cluster'
  continueOnError: true

- script: |
    # Create a temporary file to store the helm parameters
    echo '$(HELM_PARAMS)' > helm_params.txt
    echo "##vso[task.setvariable variable=HELM_PARAMS_FILE]helm_params.txt"
  displayName: 'Store Helm Parameters'

- script: |
    # Install jq for JSON parsing
    sudo apt-get update && sudo apt-get install -y jq
    
    # Fetch latest appVersion from ArtifactHub
    RESPONSE=$(curl -s https://artifacthub.io/api/v1/packages/helm/lightrun-helm-chart/lightrun-helm-chart)
    APP_VERSION=$(echo $RESPONSE | jq -r '.app_version')
    CHART_VERSION=$(echo $RESPONSE | jq -r '.version')
    
    echo "Latest chart version: $CHART_VERSION"
    echo "Latest app version: $APP_VERSION"
    
    # Add version-specific tags to the parameters file
    echo " --set deployments.frontend.image.tag=${APP_VERSION} --set deployments.backend.image.tag=${APP_VERSION} --set deployments.keycloak.image.tag=${APP_VERSION}" >> helm_params.txt
  displayName: 'Set Latest Chart Tags'

- task: HelmInstaller@0
  displayName: 'Install Helm'
  inputs:
    helmVersion: $(HELM_VERSION)
    installKubectl: true

- script: |
    wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
    k3d cluster create chart-testing --wait --timeout 120s
  displayName: 'Create k3d Cluster'

- script: |
    helm lint $(CHART_PATH) 2>&1 | grep -v "SECRET" || exit ${PIPESTATUS[0]}
  displayName: 'Lint Helm Chart'
  
- script: |
    # Use the parameters from the file
    HELM_PARAMS=$(cat helm_params.txt)
    
    # Redirect output to file
    helm template $(RELEASE_NAME) $(CHART_PATH) --namespace $(NAMESPACE) $HELM_PARAMS > template_output.yaml 2>&1
    
    # Filter sensitive data and display
    cat template_output.yaml | grep -v "password:\|secret:\|token:\|key:" || true
    
    # Check if template command was successful
    if [ -s template_output.yaml ]; then
      echo "Template validation successful"
      rm template_output.yaml
      exit 0
    else
      echo "Template validation failed"
      rm template_output.yaml
      exit 1
    fi
  displayName: 'Validate Templates'

- script: |
    kubectl create namespace $(NAMESPACE)
  displayName: 'Create Namespace'

- script: |
    # Use the parameters from the file
    HELM_PARAMS=$(cat helm_params.txt)
    
    helm install $(RELEASE_NAME) $(CHART_PATH) \
      --namespace $(NAMESPACE) \
      --wait \
      --timeout 5m \
      --debug \
      $HELM_PARAMS
  displayName: 'Install Chart'

- script: |
    kubectl get all -n $(NAMESPACE)
    
    # Check if all pods are running
    kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=$(RELEASE_NAME) -n $(NAMESPACE) --timeout=2m
    
    # Get deployment status
    kubectl get deployments -n $(NAMESPACE) -o wide
  displayName: 'Verify Deployment'

- script: |
    helm test $(RELEASE_NAME) -n $(NAMESPACE)
  displayName: 'Run Chart Tests'

- script: |
    kubectl get pods -n $(NAMESPACE)
    kubectl describe pods -n $(NAMESPACE)
    kubectl get events -n $(NAMESPACE)
    helm list -n $(NAMESPACE)
    helm status $(RELEASE_NAME) -n $(NAMESPACE)
  displayName: 'Collect Debug Info'
  condition: failed()

- script: |
    helm uninstall $(RELEASE_NAME) -n $(NAMESPACE)
  displayName: 'Cleanup'
  condition: always() 