apiVersion: apps/v1 
kind: Deployment
metadata:
  name: {{ include "lightrun-be.name" . }}
  labels:
    app: {{ include "lightrun-be.name" . }}
spec:
  strategy: 
      type: {{ .Values.deployments.backend.rollout_strategy }}
  {{- if not .Values.deployments.backend.hpa.enabled}}
  replicas: {{ .Values.deployments.backend.replicas }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ include "lightrun-be.name" . }}
  template:
    metadata:
{{- if or .Values.deployments.backend.appMetrics.exposeToDatadog .Values.deployments.backend.annotations .Values.deployments.backend.podAnnotations }}
      annotations:
        {{- with .Values.deployments.backend.annotations }}
        {{/* deprecated if favor of podAnnotations */}}
        {{ toYaml . | nindent 8 }}
        {{- end }}
        {{- with .Values.deployments.backend.podAnnotations }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
{{- include "lightrun.datadogAnnotations" (dict "serviceName" (include "lightrun-be.name" .) "metricPrefix" "backend" "deployment" .Values.deployments.backend "context" .) }}
{{- end }}
      labels:
        app: {{ include "lightrun-be.name" . }}
        {{- with .Values.deployments.backend.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.deployments.backend.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{ toYaml .Values.deployments.backend.topologySpreadConstraints | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ template "lightrun-be.serviceAccountName" . }}
      volumes:
        {{- include "lightrun-backend-crons.volumes" . | nindent 8 }}
        {{- include "lightrun-backend.volumes.asyncProfiler" . | nindent 8 }}
        - name: dumps
          emptyDir:
            sizeLimit: {{ .Values.deployments.backend.dumpsEmptyDirSizeLimit }}
      {{- with .Values.deployments.backend.extraVolumes }}
        {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.secrets.defaults.dockerhub_config }}
      imagePullSecrets:
      {{- if .Values.secrets.defaults.dockerhub_config.existingSecret }}
        - name: {{ .Values.secrets.defaults.dockerhub_config.existingSecret }}
      {{- else }}
        - name: {{ include "secrets.dockerhub.name" . }}
      {{- end -}}
      {{- end }}
      {{- if .Values.deployments.backend.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.deployments.backend.podSecurityContext | nindent 8 }}
      {{- end }}
      {{ with .Values.deployments.backend.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ . }}
      {{ end }}
      containers:
      {{- include "lightrun-backend.container.persist-async-profiler-output-files" . | nindent 8 }}
        - name: {{ include "lightrun-be.name" . }}
          securityContext: {{- include "lightrun-be.containerSecurityContext" . | indent 12 }}
          image: "{{ .Values.deployments.backend.image.repository }}:{{ .Values.deployments.backend.image.tag }}"
          imagePullPolicy: {{ .Values.deployments.backend.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          command: ["sh", "-c"]
          args:
           - |
             if [ "$ASYNC_PROFILER_FAILED_TO_DOWNLOAD" = true ]; then
               echo "async-profiler setup failed earlier, starting without it"
               exec /usr/lib/jvm/default-jvm/bin/java \
               {{- if and .Values.general.internal_tls.enabled .Values.general.internal_tls.certificates.existing_ca_secret_name }}
               "-Djavax.net.ssl.trustStore=/p12/internalca" \
               "-Djavax.net.ssl.trustStorePassword=$(KEYSTORE_PASSWORD)" \
               {{- end }}
               "-jar" "/usr/src/lightrun/{{ .Values.deployments.backend.jar_name }}"
             else
               echo "Continue normally..."
               exec /usr/lib/jvm/default-jvm/bin/java \
               {{- if and .Values.general.internal_tls.enabled .Values.general.internal_tls.certificates.existing_ca_secret_name }}
               "-Djavax.net.ssl.trustStore=/p12/internalca" \
               "-Djavax.net.ssl.trustStorePassword=$(KEYSTORE_PASSWORD)" \
               {{- end }}
               {{- include "lightrun-backend.java.argument.asyncProfiler" . | nindent 16 }} \
               "-jar" "/usr/src/lightrun/{{ .Values.deployments.backend.jar_name }}"
             fi
          volumeMounts:
          {{- include "lightrun-backend-crons.volumeMounts" . | nindent 12 }}
          {{- include "lightrun-backend.volumeMounts.asyncProfiler" . | nindent 12 }}
          {{- with .Values.deployments.backend.extraVolumeMounts }}
            {{ toYaml . | nindent 12 }}
          {{- end }}
          startupProbe:
            timeoutSeconds: {{ .Values.deployments.backend.startupProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.deployments.backend.startupProbe.periodSeconds }}
            failureThreshold: {{ .Values.deployments.backend.startupProbe.failureThreshold }}
            successThreshold: {{ .Values.deployments.backend.startupProbe.successThreshold }}
            httpGet:
              scheme: {{ include "http.scheme" . | upper }}
              path: {{ .Values.deployments.backend.startupProbe.path }}
              port: 8080
          livenessProbe:
            initialDelaySeconds: {{ .Values.deployments.backend.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.deployments.backend.livenessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.deployments.backend.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.deployments.backend.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.deployments.backend.livenessProbe.failureThreshold }}
            httpGet:
              scheme: {{ include "http.scheme" . | upper }}
              path: {{ .Values.deployments.backend.livenessProbe.path }}
              port: 8080
          readinessProbe:
            initialDelaySeconds: {{ .Values.deployments.backend.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.deployments.backend.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.deployments.backend.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.deployments.backend.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.deployments.backend.readinessProbe.failureThreshold }}
            httpGet:
              scheme: {{ include "http.scheme" . | upper }}
              path: {{ .Values.deployments.backend.readinessProbe.path }}
              port: 8080
          {{- with .Values.deployments.backend.lifecycle }}
          lifecycle:
            {{ toYaml . | nindent 12 }}
          {{- end }}
          resources:
            requests:
              cpu: {{ .Values.deployments.backend.resources.cpu }}
              memory: {{ .Values.deployments.backend.resources.memory }}
            limits:
              cpu: {{ .Values.deployments.backend.resources.cpu }}
              memory: {{ .Values.deployments.backend.resources.memory }}
          envFrom:
            - secretRef:
                name: {{ include "secrets.backend.name" . }}
          env:
          {{- include "lightrun-backend-crons.environmentVariables" . | nindent 12 }}
            - name: SPRING_PROFILES_ACTIVE
              value: "prod,swagger,cluster"
            {{- if .Values.deployments.backend.extraEnvs }}
              {{- toYaml .Values.deployments.backend.extraEnvs | nindent 12 }}
              {{- if not (include "list-of-maps-contains" (list .Values.deployments.backend.extraEnvs "_JAVA_OPTIONS") ) }}
            - name: "_JAVA_OPTIONS"
              value: {{- toYaml (include "calculate-heap-size" .Values.deployments.backend) | nindent 21  }}
              {{- end }}
            {{- else }}
            - name: "_JAVA_OPTIONS"
              value: {{- toYaml (include "calculate-heap-size" .Values.deployments.backend) | nindent 21  }}
            {{- end }}

      # waiting for mysql, rabbitmq and keycloak initialization
      initContainers:
      {{- include "lightrun-backend-crons.initContainers" . | nindent 6 }}
      {{- include "lightrun-backend.initContainer.download-async-profiler" . | nindent 6 }}

      {{- if .Values.general.tolerations }}
      tolerations:
        {{ toYaml .Values.general.tolerations | nindent 8 }}
      {{- end }}
      {{- if .Values.general.nodeSelector }}
      nodeSelector:
        {{ toYaml .Values.general.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.deployments.backend.affinity }}
      affinity:
        {{ toYaml .Values.deployments.backend.affinity | nindent 8 }}
      {{- end }}
