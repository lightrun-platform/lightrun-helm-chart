apiVersion: apps/v1 
kind: Deployment
metadata:
  name: {{ include "lightrun-be.name" . }}
  labels:
    app: {{ include "lightrun-be.name" . }}
spec:
  strategy: 
      type: {{ .Values.deployments.backend.rollout_strategy }}
  {{- if not .Values.deployments.backend.hpa.enabled}}
  replicas: {{ .Values.deployments.backend.replicas }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ include "lightrun-be.name" . }}
  template:
    metadata:
{{- if or .Values.deployments.backend.appMetrics.exposeToDatadog .Values.deployments.backend.annotations .Values.deployments.backend.podAnnotations }}
      annotations:
        {{- with .Values.deployments.backend.annotations }}
        {{/* deprecated if favor of podAnnotations */}}
        {{ toYaml . | nindent 8 }}
        {{- end }}
        {{- with .Values.deployments.backend.podAnnotations }}
        {{ toYaml . | nindent 8 }}
        {{- end }}
{{- if .Values.deployments.backend.appMetrics.exposeToDatadog }}
{{- $last := sub (len .Values.deployments.backend.appMetrics.includeMetrics ) 1 }}
        ad.datadoghq.com/{{ include "lightrun-be.name" . }}.checks: |
          {
            "openmetrics": {
              "instances": [
                {
                  "openmetrics_endpoint": "http://%%host%%:%%port%%/management/prometheus",
                  "namespace": "lightrun",
                  "metrics": [
          {{- range $index ,$metricName:= .Values.deployments.backend.appMetrics.includeMetrics }}
          {{- if ne $index $last }}
                      {"{{ $metricName }}": "backend.{{ $metricName }}"},
          {{- else }}
                      {"{{ $metricName }}": "backend.{{ $metricName }}"}
          {{- end }}
          {{- end }}
                    ]
                }
              ]
            }
          }
{{- end }}
{{- end }}
      labels:
        app: {{ include "lightrun-be.name" . }}
        {{- with .Values.deployments.backend.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.deployments.backend.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{ toYaml .Values.deployments.backend.topologySpreadConstraints | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ template "lightrun-be.serviceAccountName" . }}
      volumes:
      {{- include "lightrun-backend.volumes.asyncProfiler" . | nindent 8 }}
      {{- if and .Values.general.internal_tls.enabled .Values.general.internal_tls.certificates.existing_ca_secret_name  }}  
        - name: ca-cert
          secret:
            secretName: {{ .Values.general.internal_tls.certificates.existing_ca_secret_name }}
      {{- end }}
        - name: jcache-config
          configMap:
            name: {{ include "lightrun-be.name" . }}-jcache-config
            items:
              - key: "redisson-jcache-single.yaml"
                path: "redisson-jcache-single.yaml"
              - key: "redisson-jcache-replicated.yaml"
                path: "redisson-jcache-replicated.yaml"
        - name: certificates
          secret:
            secretName: {{ include "secrets.certificate.name" . }}
        - name: p12
          emptyDir:
            sizeLimit: 50Mi
        - name: dumps
          emptyDir:
            sizeLimit: {{ .Values.deployments.backend.dumpsEmptyDirSizeLimit }}
      {{- with .Values.deployments.backend.extraVolumes }}
        {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.general.readOnlyRootFilesystem }}
        - name: tmpfs
          emptyDir:
            sizeLimit: {{ .Values.general.readOnlyRootFilesystem_tmpfs_sizeLimit }}
      {{- end }}
      {{- if .Values.secrets.defaults.dockerhub_config }}
      imagePullSecrets:
      {{- if .Values.secrets.defaults.dockerhub_config.existingSecret }}
        - name: {{ .Values.secrets.defaults.dockerhub_config.existingSecret }}
      {{- else }}
        - name: {{ include "secrets.dockerhub.name" . }}
      {{- end -}}
      {{- end }}
      {{- if .Values.deployments.backend.podSecurityContext }}
      securityContext:
        {{- toYaml .Values.deployments.backend.podSecurityContext | nindent 8 }}
      {{- end }}
      {{ with .Values.deployments.backend.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ . }}
      {{ end }}
      containers:
      {{- include "lightrun-backend.container.persist-async-profiler-output-files" . | nindent 8 }}
        - name: {{ include "lightrun-be.name" . }}
          securityContext: {{- include "lightrun-be.containerSecurityContext" . | indent 12 }}
          image: "{{ .Values.deployments.backend.image.repository }}:{{ .Values.deployments.backend.image.tag }}"
          imagePullPolicy: {{ .Values.deployments.backend.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          command: ["/usr/lib/jvm/default-jvm/bin/java"]
          args: [{{ if and .Values.general.internal_tls.enabled .Values.general.internal_tls.certificates.existing_ca_secret_name }}"-Djavax.net.ssl.trustStore=/p12/internalca", "-Djavax.net.ssl.trustStorePassword=$(KEYSTORE_PASSWORD)",{{ end }}
            {{- include "lightrun-backend.java.argument.asyncProfiler" . | nindent 12 }}
            "-jar",
            "/usr/src/lightrun/{{ .Values.deployments.backend.jar_name }}"
          ]
          volumeMounts:
          {{- include "lightrun-backend.volumeMounts.asyncProfiler" . | nindent 12 }}
            - name: jcache-config
              mountPath: "/jcache-config"
            - name: certificates
              mountPath: /usr/src/lightrun/helm/tls
            - name: p12
              mountPath: /p12
            - name: dumps
              mountPath: /dumps
          {{- with .Values.deployments.backend.extraVolumeMounts }}
            {{ toYaml . | nindent 12 }}
          {{- end }}
          {{- if .Values.general.readOnlyRootFilesystem }}
            - name: tmpfs
              mountPath: /tmp
          {{- end }}
          startupProbe:
            timeoutSeconds: {{ .Values.deployments.backend.startupProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.deployments.backend.startupProbe.periodSeconds }}
            failureThreshold: {{ .Values.deployments.backend.startupProbe.failureThreshold }}
            successThreshold: {{ .Values.deployments.backend.startupProbe.successThreshold }}
            httpGet:
              scheme: {{ include "http.scheme" . | upper }}
              path: {{ .Values.deployments.backend.startupProbe.path }}
              port: 8080
          livenessProbe:
            initialDelaySeconds: {{ .Values.deployments.backend.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.deployments.backend.livenessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.deployments.backend.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.deployments.backend.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.deployments.backend.livenessProbe.failureThreshold }}
            httpGet:
              scheme: {{ include "http.scheme" . | upper }}
              path: {{ .Values.deployments.backend.livenessProbe.path }}
              port: 8080
          readinessProbe:
            initialDelaySeconds: {{ .Values.deployments.backend.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.deployments.backend.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.deployments.backend.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.deployments.backend.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.deployments.backend.readinessProbe.failureThreshold }}
            httpGet:
              scheme: {{ include "http.scheme" . | upper }}
              path: {{ .Values.deployments.backend.readinessProbe.path }}
              port: 8080
          {{- with .Values.deployments.backend.lifecycle }}
          lifecycle:
            {{ toYaml . | nindent 12 }}
          {{- end }}
          resources:
            requests:
              cpu: {{ .Values.deployments.backend.resources.cpu }}
              memory: {{ .Values.deployments.backend.resources.memory }}
            limits:
              cpu: {{ .Values.deployments.backend.resources.cpu }}
              memory: {{ .Values.deployments.backend.resources.memory }}
          envFrom:
            - secretRef:
                name: {{ include "secrets.backend.name" . }}
          env:
            - name: LIGHTRUN_HOSTNAME
              value: {{ .Values.general.name }}
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: INFO_DEPLOYMENT
            {{ if eq .Values.general.deployment_type "saas" }}
              value: "SaaS"
            {{ else if eq .Values.general.deployment_type "single-tenant" }}
              value: "single-tenant"
            {{ else }}
              value: "on-prem"
            {{ end }}
            - name: SPRING_PROFILES_ACTIVE
              value: "prod,swagger,cluster"
            - name: SPRING_DATASOURCE_URL
              {{- if eq .Values.deployments.backend.dbConnector  "mysql" }}
              value: "jdbc:p6spy:mysql://{{ include "mysql.db_endpoint" . }}:3306/{{ .Values.general.db_database }}?useUnicode=true&characterEncoding=utf8&allowPublicKeyRetrieval=true&trustServerCertificate=true&useSSL={{ .Values.general.db_require_secure_transport }}"
              {{- else if eq .Values.deployments.backend.dbConnector  "mariadb" }}
              value: "jdbc:mariadb://{{ include "mysql.db_endpoint" . }}:3306/{{ .Values.general.db_database }}?allowPublicKeyRetrieval=true&trustServerCertificate=true&useSSL={{ .Values.general.db_require_secure_transport }}&rewriteBatchedStatements=true"
              {{- end }}
            - name: SPRING_CACHE_JCACHE_CONFIG
              value: "file:///jcache-config/redisson-jcache-{{ .Values.deployments.redis.architecture }}.yaml"
            - name: SPRING_FLYWAY_URL
              {{- if eq .Values.deployments.backend.dbConnector "mysql" }}
              value: "jdbc:mysql://{{ include "mysql.db_endpoint" . }}:3306/{{ .Values.general.db_database }}?useUnicode=true&characterEncoding=utf8&allowPublicKeyRetrieval=true&trustServerCertificate=true&useSSL={{ .Values.general.db_require_secure_transport }}"
              {{- else if eq .Values.deployments.backend.dbConnector "mariadb" }}
              value: "jdbc:mariadb://{{ include "mysql.db_endpoint" . }}:3306/{{ .Values.general.db_database }}?allowPublicKeyRetrieval=true&trustServerCertificate=true&useSSL={{ .Values.general.db_require_secure_transport }}"
              {{- end }}
            - name: SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER-URI
              value: "https://{{ .Values.general.lightrun_endpoint }}/auth/realms/lightrun"
            - name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI
              value: "https://{{ .Values.general.lightrun_endpoint }}/auth/realms/lightrun"
            - name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI
              value: "{{ include "http.scheme" . }}://{{ include "lightrun-keycloak.name" . }}:8080/auth/realms/lightrun/protocol/openid-connect/certs"
            - name: SPRING_SECURITY_KEYCLOAK_URL
              value: "{{ include "http.scheme" . }}://{{ include "lightrun-keycloak.name" . }}:8080/auth"
            {{ if or .Values.general.internal_tls.enabled .Values.deployments.redis.encryption.enabled }}
            - name: SPRING_REDIS_SSL
              value: "true"
            - name: REDIS_PROTOCOL_NAME
              value: "rediss"
            {{ end }}
            {{ if .Values.general.internal_tls.enabled }}
            - name: SERVER_SSL_ENABLED
              value: "true"
            {{ if .Values.general.mq.enabled }}
            - name: SPRING_RABBITMQ_SSL_ENABLED
              value: "true"
            {{ end }}
            - name: TLS_SKIPCLIENTCERTIFICATEVERIFICATION
            {{ if .Values.general.internal_tls.certificates.verification  }}
              value: "false"
            {{ else }}
              value: "true"
            {{ if .Values.general.mq.enabled }}
            - name: SPRING_RABBITMQ_SSL_VALIDATE-SERVER-CERTIFICATE
              value: "false"
            {{ end }}
            {{ end }}
            {{ end }}
            {{- if not .Values.deployments.redis.auth.enabled }}
            - name: SPRING_REDIS_PASSWORD #to disable password auth even if secret contains password, but auth_enabled is false
              value: null
            {{- end }}
            - name: SPRING_SECURITY_KEYCLOAK_PORT
              value: "8080"
            - name: SPRING_SECURITY_KEYCLOAK_EXTRA-REDIRECT-URLS
              value: "https://{{ .Values.general.lightrun_endpoint }}/*"
            - name: SPRING_SECURITY_KEYCLOAK_EXTERNAL-URL
              value: "https://{{ .Values.general.lightrun_endpoint }}/auth"
            - name: JHIPSTER_SLEEP
              value: "5000" # gives time for other services to boot before the application
            - name: INTEGRATIONS_ENABLE
              value: "true"
            - name: INTEGRATIONS_DATADOG_ENABLE
              value: "false"
            - name: SERVER_EXTERNAL_HOST
              value: "{{ .Values.general.lightrun_endpoint }}"
            - name: SERVER_EXTERNAL_PORT
              value: "443"
            - name: SPRING_REDIS_HOST
              value: {{ include "lightrun-redis.endpoint" . }}
            - name: SPRING_REDIS_PORT
              value: "{{ .Values.deployments.redis.port }}"
            - name: SERVER_DISPLAY_PORT
              value: "443"
            - name: SPRING_FLYWAY_SCHEMAS
              value: {{ .Values.general.db_database }}
            - name: KEYSTORE_PATH
              value: "file:/p12/lightrun.p12"
            - name: SYSTEM_DEFAULT_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "secrets.backend.name" . }}
                  key: SPRING_SECURITY_KEYCLOAK_CLI_PASSWORD
            - name: ARTIFACTS_ENABLE_S3_FEATURE #TODO: deprecated in favor of ARTIFACTS_ENABLE in 2.1.7
              value: {{ .Values.deployments.backend.artifacts.enable | quote }}
            - name: ARTIFACTS_ENABLE
              value: {{ .Values.deployments.backend.artifacts.enable | quote }}
            - name: ARTIFACTS_S3_URL   #TODO: deprecated in favor of ARTIFACTS_REPOSITORY_URL in 2.1.7
              value: "{{ .Values.deployments.backend.artifacts.s3_url }}"
            - name: ARTIFACTS_REPOSITORY_URL
              value: "{{ .Values.deployments.backend.artifacts.repository_url }}"
            - name: ARTIFACTS_SUPPORTED_VERSIONS_URL
              value: "{{ .Values.deployments.backend.artifacts.supported_versions_url }}"
            - name: ARTIFACTS_DOWNLOAD_PRERELEASE #TODO: deprecated in favor of ARTIFACTS_VERSION_RESOLUTION_MODE in 2.1.7
              value: "{{ .Values.deployments.backend.artifacts.download_prerelease }}"
            - name: ARTIFACTS_VERSION_RESOLUTION_MODE
              value: "{{ .Values.deployments.backend.artifacts.resolution_mode }}"
            - name: LIGHTRUN_ARTIFACTS_URL
              value: "{{ include "http.scheme" . }}://{{ include "artifacts.name" . }}:8080"              
            {{- if .Values.general.mq.enabled }}
            - name: SPRING_RABBITMQ_HOST
              value: {{ include "lightrun-mq.endpoint" . }}
            - name: SPRING_RABBITMQ_PORT
              value: {{ .Values.general.mq.port | quote }}
            - name: TRACKING_MIXPANEL_QUEUE_NAME
              value: {{ .Values.general.mq.queue_name | quote }}
            {{- end }}
            {{- if .Values.deployments.backend.extraEnvs }}
              {{- toYaml .Values.deployments.backend.extraEnvs | nindent 12 }}
              {{- if not (include "list-of-maps-contains" (list .Values.deployments.backend.extraEnvs "_JAVA_OPTIONS") ) }}
            - name: "_JAVA_OPTIONS"
              value: {{- toYaml (include "calculate-heap-size" .Values.deployments.backend) | nindent 21  }}
              {{- end }}
            {{- else }}
            - name: "_JAVA_OPTIONS"
              value: {{- toYaml (include "calculate-heap-size" .Values.deployments.backend) | nindent 21  }}
            {{- end }}
            - name: LOGGING_USE-JSON-FORMAT
              value: "{{ .Values.deployments.backend.useJsonLogFormat }}"
            {{- if .Values.general.data_streamer.enabled }}
            - name: INTEGRATIONS_SIEM_STREAMING-SERVICE_URL
              value: "{{ include "http.scheme" . }}://{{ include "data_streamer.name" . }}:8080/events/post"
            {{- end }}

      # waiting for mysql and keycloak initialization
      initContainers:
      {{- include "lightrun-backend.initContainer.download-async-profiler" . | nindent 6 }}

      - name: wait-for-keycloak
        image: "{{ .Values.deployments.backend.initContainers.wait_for_keycloak.image.repository }}:{{ .Values.deployments.backend.initContainers.wait_for_keycloak.image.tag }}"
        imagePullPolicy: {{ .Values.deployments.backend.initContainers.wait_for_keycloak.image.pullPolicy }}
        securityContext: {{ include "lightrun-be.containerSecurityContext" . | indent 10 }}
        command: 
          - sh
          - /scripts/wait-for-200.sh
        resources:
          limits:
            memory: "100Mi"
            cpu: "100m"
          requests:
            memory: "100Mi"
            cpu: "100m"
        env:
          - name: URL
            value: {{ include "http.scheme" . }}://{{ include "lightrun-keycloak.name" . }}:9000/auth/health/started {{ if .Values.general.internal_tls.enabled }}--no-check-certificate{{ end }}

      {{ if .Values.general.mq.enabled }}
      - name: wait-for-rabbitmq
        image: "{{ .Values.deployments.backend.initContainers.wait_for_rabbitmq.image.repository }}:{{ .Values.deployments.backend.initContainers.wait_for_rabbitmq.image.tag }}"
        imagePullPolicy: {{ .Values.deployments.backend.initContainers.wait_for_rabbitmq.image.pullPolicy }}
        securityContext: {{ include "lightrun-be.containerSecurityContext" . | indent 10 }}
        command:
          - sh
          - /scripts/wait-for-200.sh
        resources:
          limits:
            memory: "100Mi"
            cpu: "100m"
          requests:
            memory: "100Mi"
            cpu: "100m"
        env:
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: RABBITMQ_USER
            valueFrom:
              secretKeyRef:
                name: {{ include "secrets.backend.name" . }}
                key: SPRING_RABBITMQ_USERNAME
          - name: RABBITMQ_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "secrets.backend.name" . }}
                key: SPRING_RABBITMQ_PASSWORD
          - name: RABBITMQ_TCP_PORT
            value: "15672"
          - name: URL
            value: {{ include "http.scheme" . }}://$(RABBITMQ_USER):$(RABBITMQ_PASSWORD)@{{ include "lightrun-mq.endpoint" . }}:$(RABBITMQ_TCP_PORT)/api/overview {{ if .Values.general.internal_tls.enabled }}--no-check-certificate{{ end }}
      {{- end }}
      - name: p12-creator
        image: "{{ .Values.deployments.backend.initContainers.p12_creator.image.repository }}:{{ .Values.deployments.backend.initContainers.p12_creator.image.tag }}"
        imagePullPolicy: {{ .Values.deployments.backend.initContainers.p12_creator.image.pullPolicy }}
        securityContext: {{ include "lightrun-be.containerSecurityContext" . | indent 10 }}
        resources:
          limits:
            memory: "200Mi"
            cpu: "200m"
          requests:
            memory: "200Mi"
            cpu: "200m"
        env:
        - name: KEYSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "secrets.backend.name" . }}
              key: KEYSTORE_PASSWORD
        volumeMounts:
        - name: certificates
          mountPath: /tls
        - name: p12
          mountPath: /p12
        command: ['sh', '-c', 'cp /tls/tls.crt /p12/crt.pem && cp /tls/tls.key /p12/key.pem && openssl pkcs12 -export -out /p12/lightrun.p12 -inkey /p12/key.pem -in /p12/crt.pem -passin pass:$KEYSTORE_PASSWORD -passout pass:$KEYSTORE_PASSWORD']

      {{- if and .Values.general.internal_tls.enabled .Values.general.internal_tls.certificates.existing_ca_secret_name }}  
      - name: root-ca-creator
        image: "{{ .Values.deployments.backend.image.repository }}:{{ .Values.deployments.backend.image.tag }}"
        securityContext: {{ include "lightrun-be.containerSecurityContext" . | indent 10 }}
        resources:
          limits:
            memory: "100Mi"
            cpu: "100m"
          requests:
            memory: "100Mi"
            cpu: "100m"
        env:
        - name: KEYSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "secrets.backend.name" . }}
              key: KEYSTORE_PASSWORD
        volumeMounts:
        - name: ca-cert
          mountPath: /tmp/ca-certificates/
        - name: p12
          mountPath: /p12
        command: ['sh', '-c', 'keytool -import -trustcacerts -alias internalCa -keystore /p12/internalca -file  /tmp/ca-certificates/ca.crt -noprompt -storepass $KEYSTORE_PASSWORD && keytool -importkeystore -srckeystore /usr/lib/jvm/default-jvm/jre/lib/security/cacerts -destkeystore /p12/internalca -srcstorepass changeit -deststorepass $KEYSTORE_PASSWORD']
      {{- end }}

      {{- if .Values.general.tolerations }}
      tolerations:
        {{ toYaml .Values.general.tolerations | nindent 8 }}
      {{- end }}
      {{- if .Values.general.nodeSelector }}
      nodeSelector:
        {{ toYaml .Values.general.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.deployments.backend.affinity }}
      affinity:
        {{ toYaml .Values.deployments.backend.affinity | nindent 8 }}
      {{- end }}
