---
# Source: lightrun-helm-chart/templates/artifacts/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: lightrun-artifacts
  name: lightrun-artifacts
  namespace: lightrun
automountServiceAccountToken: false
---
# Source: lightrun-helm-chart/templates/backend-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: lightrun-backend
  name: lightrun-backend
  namespace: lightrun
automountServiceAccountToken: false
---
# Source: lightrun-helm-chart/templates/frontend-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: lightrun-frontend
  name: lightrun-frontend
  namespace: lightrun
automountServiceAccountToken: false
---
# Source: lightrun-helm-chart/templates/keycloak-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: lightrun-keycloak
  name: lightrun-keycloak
  namespace: lightrun
automountServiceAccountToken: false
---
# Source: lightrun-helm-chart/templates/mysql-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: lightrun-mysql
  name: lightrun-mysql
  namespace: lightrun
automountServiceAccountToken: false
---
# Source: lightrun-helm-chart/templates/redis-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: lightrun-redis
  name: lightrun-redis
  namespace: lightrun
automountServiceAccountToken: false
---
# Source: lightrun-helm-chart/templates/router/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: lightrun-router
  name: lightrun-router
  namespace: lightrun
automountServiceAccountToken: false
---
# Source: lightrun-helm-chart/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: lightrun
automountServiceAccountToken: false
---
# Source: lightrun-helm-chart/templates/artifacts/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: lightrun-artifacts-config
data:
  nginx.server.conf: |
    listen 8080 default_server;
    server_name _;

    ## Headers
    proxy_set_header X-Request-ID      $req_id;

  nginx.http.conf: |
    ## Logging settings
    error_log /var/log/nginx/error.log notice;    
    log_format main '$remote_addr - $remote_user [$time_local] '
                          '"$request" $req_id $status $body_bytes_sent '
                          '"$http_referer" "$http_user_agent" '
                          '"$http_range" "$sent_http_content_range" '
                          '$request_time $request_length '
                          '"$content_type" "$ssl_protocol" "$ssl_cipher" ';
    access_log /var/log/nginx/access.log main;
    
    # Map set generated request_id if header not exists
    map $http_x_request_id $req_id {
        ""        $request_id;
        default   $http_x_request_id;
    }
---
# Source: lightrun-helm-chart/templates/backend-jcache-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: lightrun-backend-jcache-config
data:
  redisson-jcache-single.yaml: |
    singleServerConfig:
      idleConnectionTimeout: 10000
      connectTimeout: 10000
      timeout: 10000
      retryAttempts: 3
      retryInterval: 1500
      password: ${SPRING_REDIS_PASSWORD:-null}
      subscriptionsPerConnection: 5
      clientName: null
      address: "redis://lightrun-redis:${SPRING_REDIS_PORT:-6379}"
      sslEnableEndpointIdentification: false # Should be configurable to support known certificates
      subscriptionConnectionMinimumIdleSize: 1
      subscriptionConnectionPoolSize: 50
      connectionMinimumIdleSize: 10
      connectionPoolSize: 64
      database: 0
      dnsMonitoringInterval: 5000
    threads: 0
    nettyThreads: 0
    codec: !<org.redisson.codec.JsonJacksonCodec> {}
    transportMode: "NIO"
  redisson-jcache-replicated.yaml: |
    replicatedServersConfig:
      idleConnectionTimeout: 10000
      connectTimeout: 10000
      timeout: 10000
      retryAttempts: 3
      retryInterval: 1500
      failedSlaveReconnectionInterval: 3000
      failedSlaveCheckInterval: 60000
      password: ${SPRING_REDIS_PASSWORD:-null}
      subscriptionsPerConnection: 5
      clientName: null
      loadBalancer: !<org.redisson.connection.balancer.RoundRobinLoadBalancer> {}
      subscriptionConnectionMinimumIdleSize: 1
      subscriptionConnectionPoolSize: 50
      slaveConnectionMinimumIdleSize: 24
      slaveConnectionPoolSize: 64
      masterConnectionMinimumIdleSize: 24
      masterConnectionPoolSize: 64
      readMode: "MASTER_SLAVE"
      subscriptionMode: "SLAVE"
      nodeAddresses:
        - "redis://redis-1.example.com:${SPRING_REDIS_PORT:-6379}"
        - "redis://redis-2.example.com:${SPRING_REDIS_PORT:-6379}"
      sslEnableEndpointIdentification: false # Should be configurable to support known certificates
      scanInterval: 1000
      monitorIPChanges: false
    threads: 16
    nettyThreads: 32
    codec: !<org.redisson.codec.JsonJacksonCodec> {}
    transportMode: "NIO"
---
# Source: lightrun-helm-chart/templates/frontend-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name:  lightrun-frontend-config
data:
  default.conf: |
  
    server {
      
      listen 8080 default_server;
      
      

      server_name _;

      root /usr/share/nginx/html;
      index index.html index.htm;

      location = /health {
                access_log off;
                return 200 'ok';
        }
      location / {
        gzip  on;        # compressing on the fly
        gzip_types    text/plain application/javascript application/x-javascript text/javascript text/xml text/css;

        gzip_static on;  # Works only if you have already compressed .gz files

        index index.html
        try_files $uri $uri/ @index;
        error_page 404 = @index;
        log_not_found off;
      }

      location = /index.html {
        add_header Cache-Control 'no-store, no-cache, max-age=0';
        add_header X-Frame-Options "DENY" always;
        add_header Content-Security-Policy "frame-ancestors 'none'" always;
      }

      location @index {
        add_header Cache-Control 'no-store, no-cache, max-age=0';
        add_header X-Frame-Options "DENY" always;
        add_header Content-Security-Policy "frame-ancestors 'none'" always;
        try_files /index.html =404;
      }

    }
---
# Source: lightrun-helm-chart/templates/redis_config_cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: lightrun-redis-config
data:
  redis.conf: |
      dir /data
      port 6379
      protected-mode no
---
# Source: lightrun-helm-chart/templates/router/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: lightrun-router-conf
data:
  nginx.conf: |
    worker_processes 3;
    worker_rlimit_nofile 20480;
    events {
        worker_connections  10240;
    }
    
    error_log  /var/log/nginx/error.log notice;
    pid        /tmp/nginx.pid;
    http {
        proxy_temp_path /tmp/proxy_temp;
        client_body_temp_path /tmp/client_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;

        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for" "$req_id" '
                          '"$upstream_status" "$upstream_response_time"';

        access_log  /var/log/nginx/access.log  main;
        sendfile        on;
        keepalive_timeout  65;
        include /etc/nginx/conf.d/*.conf;

        # Map return $remote_addr if x-forwarded-for is empty
        map $http_x_forwarded_for $xff {   
            "" $remote_addr;
            default $http_x_forwarded_for;
        }

        # Map return $scheme if x-forwarded-proto is empty
        map $http_x_forwarded_proto $xf_proto {
            "" $scheme;
            default $http_x_forwarded_proto;
        }

        # Map set generated request_id if header not exists
        map $http_x_request_id $req_id {
            ""        $request_id;
            default   $http_x_request_id;
        } 
    }
  default.conf: |
      ##########
      ## http ##
      ##########
      ### Http Snippets start
      
      ### Http Snippets end

      


      upstream lightrun-backend {
        # 2nd server is for a retry to k8s service
        server lightrun-backend:8080 max_fails=0;
        server lightrun-backend:8080 max_fails=0;
      }

      upstream lightrun-keycloak {
        server lightrun-keycloak:8080 max_fails=0;
      }
      
      upstream lightrun-frontend {
        server lightrun-frontend:8080 max_fails=0;
      }

      proxy_request_buffering   on;
      large_client_header_buffers 4 16k;
      client_max_body_size      25m;
      proxy_http_version        1.1;
      proxy_buffering           off;
      proxy_buffer_size         8k;

      # Timeouts
      proxy_connect_timeout 5s;


      


      ############
      ## Server ##
      ############
      server {
        server_name lightrun.example.com;
        
        default_type text/html;

        ### Server Snippets start
        
        ### Server Snippets end


        ### TLS settings
        
        listen 8080 default_server;
        

        ### Headers
        proxy_set_header Host              $host;
        proxy_set_header X-Forwarded-For   $xff;
        proxy_set_header X-Forwarded-Proto $xf_proto;
        proxy_set_header X-Request-ID      $req_id;
        
        set_real_ip_from 0.0.0.0/0;
        real_ip_header    X-Forwarded-For;
        real_ip_recursive on;
        

        # Global access list


        location = /health {
                  access_log off;
                  return 200 'ok';
          }

        # Custom errors
        root /usr/share/nginx/html;
        proxy_intercept_errors on;
        error_page 500 502 503 504 =503 /50x.html;
        error_page 403 /403.html;
        error_page 429 /429.html;
        location = /403.html {
          internal;
        }
        location = /429.html {
          internal;
        }
        location = /50x.html {
          internal;
        }


        location /auth/admin {
          deny all;
          
          
          proxy_pass http://lightrun-keycloak;
        }

        location /auth {
          
          
          proxy_pass http://lightrun-keycloak;
        }
        
        location /device {
          
          
          proxy_pass http://lightrun-frontend;
        }

        location /app {
          
          
          proxy_pass http://lightrun-frontend;
        }

        location /company {
          
          
          proxy_pass http://lightrun-frontend;
        }

        location /content {
          
          
          proxy_pass http://lightrun-frontend;
        }

        location = / {
          
          
          proxy_pass http://lightrun-frontend;
        }

        # Location for the snapshots upload
        location ~ ^/debuggees/[\w-]+/breakpoints {
        
          # Big buffer size to support large snapshots
          # It is important to note that the buffer size is per request, so if you have 10 requests with 1MB each, you will need 10MB of memory.
          client_body_buffer_size 2m;
          proxy_pass http://lightrun-backend;
        }

        location /debuggees {
        
          proxy_pass http://lightrun-backend;
        }

        location /socket {
        
          # WebSocket support
          proxy_set_header Upgrade      $http_upgrade;
          proxy_set_header Connection   "upgrade";
          proxy_pass http://lightrun-backend;
        }

        location /management/prometheus {
          deny all;
        
          proxy_pass http://lightrun-backend;
        }

        location /router_status {
          allow 127.0.0.1/32;
          deny all;
          stub_status;
          access_log off;
        }

        location / {
        
          proxy_pass http://lightrun-backend;
        }
      }
---
# Source: lightrun-helm-chart/templates/artifacts/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: lightrun-artifacts
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: lightrun-artifacts
---
# Source: lightrun-helm-chart/templates/backend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: lightrun-backend
  
  
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app: lightrun-backend
---
# Source: lightrun-helm-chart/templates/frontend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: lightrun-frontend
  
  
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app: lightrun-frontend
---
# Source: lightrun-helm-chart/templates/keycloak-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: lightrun-keycloak
  
  
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 9080
      protocol: TCP
      name: keycloak
    - port: 9000
      targetPort: 9000
      protocol: TCP
      name: mgmt      
  selector:
    app: lightrun-keycloak
---
# Source: lightrun-helm-chart/templates/keycloak-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: lightrun-keycloak-headless
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - port: 7800
      targetPort: 7800
      protocol: TCP
      name: kc-cluster
  selector:
    app: lightrun-keycloak
---
# Source: lightrun-helm-chart/templates/mysql.yaml
apiVersion: v1
kind: Service
metadata:
  name: lightrun-mysql
  labels:
    app: lightrun-mysql
    
  
spec:
  ports:
  - port: 3306
  clusterIP: None
  selector:
    app: lightrun-mysql
---
# Source: lightrun-helm-chart/templates/redis-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: lightrun-redis
  
  
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: redis
      port: 6379
      protocol: TCP
      targetPort: 6379
  selector:
    app: lightrun-redis
---
# Source: lightrun-helm-chart/templates/router/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: lightrun-router
  
  
spec:
  ports:
  - port: 8443
    protocol: TCP
    targetPort: https
    name: https
  - port: 8080
    protocol: TCP
    targetPort: http
    name: http
  selector:
    app: lightrun-router
  type: ClusterIP
---
# Source: lightrun-helm-chart/templates/artifacts/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lightrun-artifacts
spec:
  replicas: 1
  selector:
    matchLabels:
      app: lightrun-artifacts
  template:
    metadata:
      labels:
        app: lightrun-artifacts
    spec:
      serviceAccountName: lightrun-artifacts
      imagePullSecrets:
        - name: lightrun-dockerhub
      containers:
        - name: lightrun-artifacts
          securityContext:            
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000000
            seccompProfile:
              type: RuntimeDefault
          resources:  
            requests:
              cpu: 500m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 128Mi
          image: "lightruncom/artifacts:"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 10
            timeoutSeconds: 10
            periodSeconds: 20
            successThreshold: 1
            failureThreshold: 3
            httpGet:
              scheme: HTTP
              path: /health
              port: http
          readinessProbe:
            initialDelaySeconds: 10
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
            httpGet:
              scheme: HTTP
              path: /health
              port: http
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.server.conf
              subPath: nginx.server.conf
              readOnly: true
            - name: nginx-config
              mountPath: /etc/nginx/nginx.http.conf
              subPath: nginx.http.conf
              readOnly: true
      volumes:
      - name: nginx-config
        configMap:
          name: lightrun-artifacts-config
---
# Source: lightrun-helm-chart/templates/backend-deployment.yaml
apiVersion: apps/v1 
kind: Deployment
metadata:
  name: lightrun-backend
  labels:
    app: lightrun-backend
spec:
  strategy: 
      type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: lightrun-backend
  template:
    metadata:
      labels:
        app: lightrun-backend
    spec:
      serviceAccountName: lightrun-backend
      volumes:
        
        - name: encryption-keys
          secret: 
            secretName: lightrun-backend
            optional: true
            items: 
              # Only select items that start with encryption-key-
              
              
              - key: encryption-key-0
                path: encryption-key-0
              
        - name: jcache-config
          configMap:
            name: lightrun-backend-jcache-config
            items:
              - key: "redisson-jcache-single.yaml"
                path: "redisson-jcache-single.yaml"
              - key: "redisson-jcache-replicated.yaml"
                path: "redisson-jcache-replicated.yaml"
        - name: certificates
          secret:
            secretName: lightrun-certificate
        - name: p12
          emptyDir:
            sizeLimit: 50Mi
        
        - name: dumps
          emptyDir:
            sizeLimit: 5Gi
      imagePullSecrets:
        - name: lightrun-dockerhub
      
      terminationGracePeriodSeconds: 45
      
      containers:
        
        - name: lightrun-backend
          securityContext:            
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000000
            seccompProfile:
              type: RuntimeDefault
          image: "lightruncom/server:"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          command: ["sh", "-c"]
          args:
           - |
             CMD="/usr/lib/jvm/default-jvm/bin/java"
             # Add TLS opts if enabled

             # Add async-profiler only if setup succeeded
             if [ -f /async-profiler/lib/libasyncProfiler.so ]; then
               CMD="$CMD "
             fi

             # Add the jar
             CMD="$CMD -jar /usr/src/lightrun/LightrunServer.jar"

             exec $CMD

          volumeMounts:
            
            - name: encryption-keys
              mountPath: /encryption-keys
              readOnly: true
            - name: jcache-config
              mountPath: "/jcache-config"
            - name: certificates
              mountPath: /usr/src/lightrun/helm/tls
            - name: p12
              mountPath: /p12
            - name: dumps
              mountPath: /dumps
            
          startupProbe:
            timeoutSeconds: 5
            periodSeconds: 10
            failureThreshold: 60
            successThreshold: 1
            httpGet:
              scheme: HTTP
              path: /management/health/readiness
              port: 8080
          livenessProbe:
            initialDelaySeconds: 200
            timeoutSeconds: 30
            periodSeconds: 50
            successThreshold: 1
            failureThreshold: 3
            httpGet:
              scheme: HTTP
              path: /version
              port: 8080
          readinessProbe:
            initialDelaySeconds: 10
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
            httpGet:
              scheme: HTTP
              path: /management/health/readiness
              port: 8080
          lifecycle:
            
            preStop:
              exec:
                command:
                - sh
                - -c
                - sleep 10
          resources:
            requests:
              cpu: 3000m
              memory: 6Gi
            limits:
              cpu: 3000m
              memory: 6Gi
          envFrom:
            - secretRef:
                name: lightrun-backend
          env:
            
            - name: SERVER_SECURITY_ENCRYPTION-KEYS-PATH
              value: file:/encryption-keys
            - name: LIGHTRUN_HOSTNAME
              value: client-name
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: INFO_DEPLOYMENT
            
              value: "on-prem"
            
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:mariadb://lightrun-mysql:3306/lightrunserver?allowPublicKeyRetrieval=true&trustServerCertificate=true&useSSL=false&rewriteBatchedStatements=true"
            - name: SPRING_CACHE_JCACHE_CONFIG
              value: "file:///jcache-config/redisson-jcache-single.yaml"
            - name: SPRING_FLYWAY_URL
              value: "jdbc:mariadb://lightrun-mysql:3306/lightrunserver?allowPublicKeyRetrieval=true&trustServerCertificate=true&useSSL=false"
            - name: SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER-URI
              value: "https://lightrun.example.com/auth/realms/lightrun"
            - name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI
              value: "https://lightrun.example.com/auth/realms/lightrun"
            - name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI
              value: "http://lightrun-keycloak:8080/auth/realms/lightrun/protocol/openid-connect/certs"
            - name: SPRING_SECURITY_KEYCLOAK_URL
              value: "http://lightrun-keycloak:8080/auth"
            
            
            - name: SPRING_REDIS_PASSWORD #to disable password auth even if secret contains password, but auth_enabled is false
              value: null
            - name: SPRING_SECURITY_KEYCLOAK_PORT
              value: "8080"
            - name: SPRING_SECURITY_KEYCLOAK_EXTRA-REDIRECT-URLS
              value: "https://lightrun.example.com/*"
            - name: SPRING_SECURITY_KEYCLOAK_EXTERNAL-URL
              value: "https://lightrun.example.com/auth"
            - name: JHIPSTER_SLEEP
              value: "5000" # gives time for other services to boot before the application
            - name: INTEGRATIONS_ENABLE
              value: "true"
            - name: INTEGRATIONS_DATADOG_ENABLE
              value: "false"
            - name: SERVER_EXTERNAL_HOST
              value: "lightrun.example.com"
            - name: SERVER_EXTERNAL_PORT
              value: "443"
            - name: SPRING_REDIS_HOST
              value: lightrun-redis
            - name: SPRING_REDIS_PORT
              value: "6379"
            - name: SERVER_DISPLAY_PORT
              value: "443"
            - name: SPRING_FLYWAY_SCHEMAS
              value: lightrunserver
            - name: KEYSTORE_PATH
              value: "file:/p12/lightrun.p12"
            - name: SYSTEM_DEFAULT_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: lightrun-backend
                  key: SPRING_SECURITY_KEYCLOAK_CLI_PASSWORD
            - name: ARTIFACTS_ENABLE_S3_FEATURE #TODO: deprecated in favor of ARTIFACTS_ENABLE in 2.1.7
              value: "true"
            - name: ARTIFACTS_ENABLE
              value: "true"
            - name: ARTIFACTS_S3_URL   #TODO: deprecated in favor of ARTIFACTS_REPOSITORY_URL in 2.1.7
              value: "https://artifacts.lightrun.com/"
            - name: ARTIFACTS_REPOSITORY_URL
              value: "https://artifacts.lightrun.com/"
            - name: ARTIFACTS_SUPPORTED_VERSIONS_URL
              value: "https://artifacts.lightrun.com/supported-versions.json"
            - name: ARTIFACTS_DOWNLOAD_PRERELEASE #TODO: deprecated in favor of ARTIFACTS_VERSION_RESOLUTION_MODE in 2.1.7
              value: "false"
            - name: ARTIFACTS_VERSION_RESOLUTION_MODE
              value: "latest"
            - name: LIGHTRUN_ARTIFACTS_URL
              value: "http://lightrun-artifacts:8080"
            - name: LOGGING_USE-JSON-FORMAT
              value: "false"
            - name: SPRING_PROFILES_ACTIVE
              value: "prod,swagger,cluster"
            - name: "_JAVA_OPTIONS"
              value:
                     -Xmx4608m -Xms4608m

      # waiting for mysql, rabbitmq and keycloak initialization
      initContainers:
      - name: wait-for-keycloak
        image: "lightruncom/chart-helper:0.3.0-alpine-3.22.0-r0.lr-1"
        imagePullPolicy: 
        securityContext:     
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1000000
          seccompProfile:
            type: RuntimeDefault
        command: 
          - sh
          - /scripts/wait-for-200.sh
        resources:
          limits:
            memory: "100Mi"
            cpu: "100m"
          requests:
            memory: "100Mi"
            cpu: "100m"
        env:
          - name: URL
            value: http://lightrun-keycloak:9000/auth/health/started 
      
      
      - name: p12-creator
        image: "lightruncom/chart-helper:0.3.0-alpine-3.22.0-r0.lr-1"
        imagePullPolicy: 
        securityContext:     
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1000000
          seccompProfile:
            type: RuntimeDefault
        resources:
          limits:
            memory: "200Mi"
            cpu: "200m"
          requests:
            memory: "200Mi"
            cpu: "200m"
        env:
        - name: KEYSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: lightrun-backend
              key: KEYSTORE_PASSWORD
        volumeMounts:
        - name: certificates
          mountPath: /tls
        - name: p12
          mountPath: /p12
        command: ['sh', '-c', 'cp /tls/tls.crt /p12/crt.pem && cp /tls/tls.key /p12/key.pem && openssl pkcs12 -export -out /p12/lightrun.p12 -inkey /p12/key.pem -in /p12/crt.pem -passin pass:$KEYSTORE_PASSWORD -passout pass:$KEYSTORE_PASSWORD']
---
# Source: lightrun-helm-chart/templates/frontend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lightrun-frontend
  labels:
    app: lightrun-frontend
spec:
  replicas: 1
  strategy: 
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: lightrun-frontend
  template:
    metadata:
      labels:
        app: lightrun-frontend
    spec:
      serviceAccountName: lightrun-frontend
      imagePullSecrets:
        - name: lightrun-dockerhub
      containers:
        - name: lightrun-frontend
          securityContext:            
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000000
            seccompProfile:
              type: RuntimeDefault
          image: "lightruncom/webapp:"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 10
            timeoutSeconds: 10
            periodSeconds: 20
            successThreshold: 1
            failureThreshold: 3
            httpGet:
              scheme: HTTP
              path: /health
              port: http
          readinessProbe:
            initialDelaySeconds: 10
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
            httpGet:
              scheme: HTTP
              path: /health
              port: http
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 100m
              memory: 128Mi
          env:
            - name: BACKEND_URI
              value: lightrun-backend
            - name: KEYCLOAK_URI
              value: lightrun-keycloak
          volumeMounts:
          - name: frontend-config
            mountPath: /etc/nginx/conf.d/default.conf
            subPath: default.conf
            readOnly: false
      volumes:
      - name: frontend-config
        configMap:
          name: lightrun-frontend-config
          items:
            - key: default.conf
              path: default.conf
---
# Source: lightrun-helm-chart/templates/redis-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lightrun-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: lightrun-redis
  template:
    metadata:
      labels:
        app: lightrun-redis

    spec:
      serviceAccountName: lightrun-redis
      imagePullSecrets:
        - name: lightrun-dockerhub
      containers:
        - name: lightrun-redis
          securityContext:            
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000000
            seccompProfile:
              type: RuntimeDefault
          resources:  
            requests:
              cpu: 2000m
              memory: 6500Mi
            limits:
              cpu: 2000m
              memory: 6500Mi
          image: lightruncom/redis:7.2.10-alpine-3.22.0-r0.lr-1
          imagePullPolicy: IfNotPresent
          livenessProbe: 
            exec:
              command:
              - redis-cli
              - -p
              - "6379"
              - ping
            initialDelaySeconds: 50
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe: 
            exec:
              command:
              - redis-cli
              - -p
              - "6379"
              - ping
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          command:
            - redis-server
            - /usr/local/etc/redis/redis.conf
          volumeMounts:
          - name: data
            mountPath: /data
            readOnly: false
          - name: redis-conf
            mountPath: /usr/local/etc/redis/redis.conf
            subPath: redis.conf
            readOnly: true
      volumes:
      - name: redis-conf
        configMap:
          name: lightrun-redis-config
          items:
            - key: redis.conf
              path: redis.conf
      - name: data
        emptyDir:
          sizeLimit: 5Gi
---
# Source: lightrun-helm-chart/templates/router/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lightrun-router
  labels:
    app: lightrun-router
spec:
  strategy:
      type: RollingUpdate
  replicas: 1
  selector:
    matchLabels:
      app: lightrun-router
  template:
    metadata:
      annotations:
        checksum/config: 5edd1ca45fd4155b2628b32cecddab73624df18cc96c3aef221ef4db4c6d6654
      labels:
        app: lightrun-router
    spec:
      imagePullSecrets:
        - name: lightrun-dockerhub
      serviceAccountName: lightrun-router
      containers:
        - name: lightrun-router
          securityContext:            
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000000
            seccompProfile:
              type: RuntimeDefault
          image: "lightruncom/router:1.28.0-alpine-3.22.0-r0.lr-1"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: nginx-conf
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
              readOnly: true
            - name: nginx-conf
              mountPath: /etc/nginx/nginx.conf  
              subPath: nginx.conf
              readOnly: true
          resources:
            requests:
              cpu: 300m
              memory: 256Mi
            limits:
              cpu: 300m
              memory: 256Mi
          ports:
          - containerPort: 8080
            name: http
            
          livenessProbe:
            initialDelaySeconds: 10
            timeoutSeconds: 10
            periodSeconds: 20
            successThreshold: 1
            failureThreshold: 3
            httpGet:
              scheme: HTTP
              path: /health
              port: http
          readinessProbe:
            initialDelaySeconds: 10
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
            httpGet:
              scheme: HTTP
              path: /health
              port: http
      volumes:
      - name: nginx-conf
        configMap:
          name: lightrun-router-conf
---
# Source: lightrun-helm-chart/templates/keycloak-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: lightrun-keycloak
  labels:
    app: lightrun-keycloak
spec:
  serviceName: lightrun-keycloak
  updateStrategy: 
    type: RollingUpdate
  # For clusters with more than 3 pods, consider changing the number of "owner nodes" as described in
  # https://www.keycloak.org/server/caching#_configuring_caches -> Configuring caches for availability
  replicas: 1
  selector:
    matchLabels:
      app: lightrun-keycloak
  template:
    metadata:
      labels:
        app: lightrun-keycloak
    spec:
      serviceAccountName: lightrun-keycloak
      imagePullSecrets:
        - name: lightrun-dockerhub
      containers:        
        - name: lightrun-keycloak
          securityContext:            
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000000
            seccompProfile:
              type: RuntimeDefault
          resources:
            requests:
              cpu: 1000m
              memory: 2Gi
            limits:
              cpu: 1000m
              memory: 2Gi
          image: "lightruncom/keycloak:"
          imagePullPolicy: IfNotPresent
          ports:
            - name: mgmt
              containerPort: 9000
              protocol: TCP          
            - name: http
              containerPort: 9080
              protocol: TCP
            - name: kc-cluster
              containerPort: 7800
              protocol: TCP
          command: ["sh", "-c"]
          args:
            - |
              # Base JAVA_OPTS_APPEND
              JAVA_OPTS_APPEND="-Djgroups.dns.query=lightrun-keycloak-headless"

              # Append async-profiler only if setup succeeded
              if [ -f /async-profiler/lib/libasyncProfiler.so ]; then
                JAVA_OPTS_APPEND="$JAVA_OPTS_APPEND "
              fi

              export JAVA_OPTS_APPEND

              # Build startup command
              CMD="/opt/keycloak/bin/kc.sh start --optimized --http-port 9080"

              echo "JAVA_OPTS_APPEND at runtime: $JAVA_OPTS_APPEND"

              exec $CMD
          readinessProbe:
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
            httpGet:
              scheme: HTTP
              path: /auth
              port: 9080
          livenessProbe:
            initialDelaySeconds: 200
            timeoutSeconds: 30
            periodSeconds: 50
            successThreshold: 1
            failureThreshold: 3
            httpGet:
              scheme: HTTP
              path: /auth
              port: 9080
          env:          
            - name: INFO_DEPLOYMENT
            
              value: "on-prem"
            
            - name: KC_PROXY_HEADERS
              value: "xforwarded"
            - name: KC_BOOTSTRAP_ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: lightrun-keycloak
                  key: KEYCLOAK_USER
            - name: KC_BOOTSTRAP_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: lightrun-keycloak
                  key: KEYCLOAK_PASSWORD
            
            - name: KC_HTTPS_CERTIFICATE_FILE
            - name: KC_HTTPS_CERTIFICATE_KEY_FILE
            - name: KC_HTTP_ENABLED
              value: "true"
            
            - name: KC_DB
              value: mysql
            - name: KC_DB_URL
              value: jdbc:mariadb://lightrun-mysql:3306/lightrunserver?useSSL=false&allowPublicKeyRetrieval=true&trustServerCertificate=true&serverTimezone=UTC
            - name: KC_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: lightrun-keycloak
                  key: DB_USER
            - name: KC_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: lightrun-keycloak
                  key: DB_PASSWORD
            - name: DB_ADDR
              value: lightrun-mysql
            - name: DB_PORT
              value: "3306"
            - name: DB_DATABASE
              value: lightrunserver
            - name: JDBC_PARAMS
              value: "useSSL=false&allowPublicKeyRetrieval=true"
            - name: KEYCLOAK_STATISTICS
              value: "db,http"
            - name: KC_CACHE
              value: ispn
            - name: KC_CACHE_STACK
              value: jdbc-ping
            - name: JAVASCRIPT_FILES
              value: js/keycloak.js
            - name: "_JAVA_OPTIONS"
              value:
                     -Xmx1536m -Xms1536m
            - name: KC_HOSTNAME
              value: 'https://lightrun.example.com/auth'
      initContainers:
      
      
      - name: wait-for-mysql
        image: mysql:8.0.38
        imagePullPolicy: IfNotPresent
        securityContext:            
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000000
            seccompProfile:
              type: RuntimeDefault
        resources:
          limits:
            memory: "100Mi"
            cpu: "100m"
          requests:
            memory: "100Mi"
            cpu: "100m"
        command: ["sh", "-c"]
        args: 
          - while ! mysql -u"$MYSQL_USER" -p"$MYSQL_PASSWORD" -h lightrun-mysql -e "SELECT 1" --ssl-mode=DISABLED --connect-timeout 2; do sleep 1; done
        env:
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                name: lightrun-keycloak
                key: DB_USER
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: lightrun-keycloak
                key: DB_PASSWORD
          - name: MYSQL_TCP_PORT
            value: "3306"
---
# Source: lightrun-helm-chart/templates/mysql.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: lightrun-mysql
  labels:
    app: lightrun-mysql
spec:
  replicas: 1 
  selector:
    matchLabels:
      app: lightrun-mysql
  serviceName: lightrun-mysql
  # minReadySeconds: 10 # by default is 0
  template:
    metadata:

      labels:
        app: lightrun-mysql
    spec:
      terminationGracePeriodSeconds: 10
      securityContext:        
        fsGroup: 1000000
      serviceAccountName: lightrun-mysql
      imagePullSecrets:
        - name: lightrun-dockerhub
      containers:
        - name: lightrun-mysql
          securityContext:            
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000000
            seccompProfile:
              type: RuntimeDefault
          image: "mysql:8.0.38"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 200
            timeoutSeconds: 10
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
            exec:
              command:
                - bash 
                - -c
                - mysql -u"$MYSQL_USER" -p"$MYSQL_PASSWORD" -h 127.0.0.1 -e 'SELECT 1' --ssl-mode=DISABLED --get-server-public-key
          readinessProbe:
            exec:
              command:
                - bash 
                - -c
                - mysql -u"$MYSQL_USER" -p"$MYSQL_PASSWORD" -h 127.0.0.1 -e 'SELECT 1' --ssl-mode=DISABLED --get-server-public-key
            initialDelaySeconds: 5
            periodSeconds: 2
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              cpu: 2000m
              memory: 8Gi
            limits:
              cpu: 2000m
              memory: 8Gi        
          args: [
            "--lower_case_table_names=1",
            "--skip-log-bin",
            "--skip-ssl",
            "--character_set_server=utf8mb4",
            "--explicit_defaults_for_timestamp",
            "--max_connections=1000"
                ]
          env:
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: lightrun-keycloak
                  key: DB_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: lightrun-keycloak
                  key: DB_PASSWORD
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: lightrun-keycloak
                  key: DB_PASSWORD
            - name: MYSQL_DATABASE
              value: lightrunserver
            - name: MYSQL_TCP_PORT
              value: "3306"
          ports:
          - containerPort: 3306
          volumeMounts:
          - name: mysql
            mountPath: /var/lib/mysql
  volumeClaimTemplates:
  - metadata:
      name: mysql
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: gp2
      resources:
        requests:
          storage: 100Gi
---
# Source: lightrun-helm-chart/templates/router/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: lightrun-router
  
  annotations:
    nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
      - lightrun.example.com
      secretName: lightrun-certificate
  rules:
    - host: lightrun.example.com
      http:
        paths:
        - backend:
            service:
              name: lightrun-router
              port:
                name: http
          path: /
          pathType: Prefix
---
# Source: lightrun-helm-chart/templates/pdb.yaml
---
---
# Source: lightrun-helm-chart/templates/pdb.yaml
---
